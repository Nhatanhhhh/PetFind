// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetStore.Data.Context;

#nullable disable

namespace PetStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetStore.Models.Entities.ContentModeration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int>("PetReportId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("PetReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ContentModerations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2287),
                            ModeratorId = 1,
                            PetReportId = 1,
                            ReviewedAt = new DateTime(2025, 6, 20, 19, 20, 46, 29, DateTimeKind.Utc).AddTicks(2288),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 21, 1, 20, 46, 29, DateTimeKind.Utc).AddTicks(2292),
                            ModeratorId = 1,
                            PetReportId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("PetReportId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetReportId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Xin chào, báo cáo của bạn về chú chó Max đã được duyệt.",
                            CreatedAt = new DateTime(2025, 6, 21, 2, 20, 46, 29, DateTimeKind.Utc).AddTicks(2309),
                            IsRead = true,
                            PetReportId = 1,
                            ReceiverId = 2,
                            SenderId = 1
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.PetReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Breed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAISearchEnabled")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("LostOrFoundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PetName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PetReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Breed = "Golden Retriever",
                            City = "TP.HCM",
                            Color = "Vàng",
                            ContactEmail = "user@petstore.com",
                            ContactName = "Nguyễn Văn A",
                            ContactPhone = "0901111222",
                            CreatedAt = new DateTime(2025, 6, 19, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2261),
                            Description = "Chó nhà tôi bị lạc ở công viên 23/9. Có đeo vòng cổ màu đỏ, thân thiện với người.",
                            District = "Quận 1",
                            ImageUrl = "/images/pets/dog1.jpg",
                            IsAISearchEnabled = true,
                            Latitude = 10.776899999999999,
                            Longitude = 106.7009,
                            LostOrFoundDate = new DateTime(2025, 6, 19, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2252),
                            PetName = "Max",
                            Species = "Dog",
                            Status = "Searching",
                            Title = "Mất chó Golden màu vàng",
                            Type = "Lost",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Breed = "Mèo ta",
                            City = "TP.HCM",
                            Color = "Đen trắng",
                            ContactEmail = "user@petstore.com",
                            ContactName = "Nguyễn Văn A",
                            ContactPhone = "0901111222",
                            CreatedAt = new DateTime(2025, 6, 20, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2266),
                            Description = "Nhặt được mèo khoảng 3 tháng tuổi ở khu vực chợ Bến Thành. Rất ngoan và sạch sẽ.",
                            District = "Quận 1",
                            ImageUrl = "/images/pets/cat1.jpg",
                            IsAISearchEnabled = false,
                            Latitude = 10.7723,
                            Longitude = 106.69799999999999,
                            LostOrFoundDate = new DateTime(2025, 6, 20, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2264),
                            Species = "Cat",
                            Status = "Pending",
                            Title = "Nhặt được mèo đen trắng",
                            Type = "Found",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 21, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(1764),
                            Description = "Quản trị viên hệ thống",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 21, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(1766),
                            Description = "Người dùng thông thường",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Lê Lợi, Q1, TP.HCM",
                            AvatarUrl = "/images/avatars/admin.jpg",
                            CreatedAt = new DateTime(2025, 6, 21, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2201),
                            Email = "admin@petstore.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "System",
                            PasswordHash = "6G94qKPK8LYNjnTllCqm2G3BUM08AzOK7yW30tfjrMc=",
                            PhoneNumber = "0901234567",
                            UserName = "admin@petstore.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "789 Lý Tự Trọng, Q1, TP.HCM",
                            AvatarUrl = "/images/avatars/user.jpg",
                            CreatedAt = new DateTime(2025, 6, 21, 7, 20, 46, 29, DateTimeKind.Utc).AddTicks(2204),
                            Email = "user@petstore.com",
                            FirstName = "Nguyễn",
                            IsActive = true,
                            LastName = "Văn A",
                            PasswordHash = "PnwZV2SIhigW8TtRLKzz5LqX3ZckPqC9airRZC2GunI=",
                            PhoneNumber = "0901111222",
                            UserName = "user@petstore.com"
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("PetStore.Models.Entities.ContentModeration", b =>
                {
                    b.HasOne("PetStore.Models.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PetStore.Models.Entities.PetReport", "PetReport")
                        .WithMany("ContentModerations")
                        .HasForeignKey("PetReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetStore.Models.Entities.User", null)
                        .WithMany("Moderations")
                        .HasForeignKey("UserId");

                    b.Navigation("Moderator");

                    b.Navigation("PetReport");
                });

            modelBuilder.Entity("PetStore.Models.Entities.Message", b =>
                {
                    b.HasOne("PetStore.Models.Entities.PetReport", "PetReport")
                        .WithMany("Messages")
                        .HasForeignKey("PetReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetStore.Models.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetStore.Models.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PetReport");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PetStore.Models.Entities.PetReport", b =>
                {
                    b.HasOne("PetStore.Models.Entities.User", "User")
                        .WithMany("PetReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetStore.Models.Entities.UserRole", b =>
                {
                    b.HasOne("PetStore.Models.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetStore.Models.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetStore.Models.Entities.PetReport", b =>
                {
                    b.Navigation("ContentModerations");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PetStore.Models.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PetStore.Models.Entities.User", b =>
                {
                    b.Navigation("Moderations");

                    b.Navigation("PetReports");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
